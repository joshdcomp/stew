// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

// Authentication

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdWars ChoreWar[]

  createdChores   Chore[] @relation("CreatedChores")
  completedChores Chore[] @relation("CompletedChores")

  wars    UserWars[]
  battles UsersInBattles[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// Chores

model Chore {
  id Int @id @default(autoincrement())

  createdBy     User?   @relation("CreatedChores", fields: [createdByID], references: [id])
  createdByID   String?
  completedBy   User?   @relation("CompletedChores", fields: [completedByID], references: [id])
  completedByID String?

  battle   ChoreBattle? @relation("Chores", fields: [battleID], references: [id])
  battleID Int?

  createdOn   DateTime  @default(now())
  completedOn DateTime?
  effectiveOn DateTime? // for use with repeating type. When a repeatable chore is completed, a new one should be spawned where the effective date is calculated by cadenceUnit+cadenceValue. When a new battle starts, any chores that become effective within the battle dates should get an updated effective date to be the start of the battle
  expiresOn   DateTime?
  dueOn       DateTime?

  type         ChoreType     @default(ONETIME)
  cadenceUnit  CadenceUnits?
  cadenceValue Int?
  status       ChoreStatus   @default(AVAILABLE)
  points       Int?
  title        String
  description  String?
  room         Room?         @relation("ChoreRoom", fields: [roomID], references: [id])
  roomID       Int?
}

enum ChoreType {
  ONETIME
  REPEATABLE
}

enum ChoreStatus {
  AVAILABLE
  COMPLETED
  EXPIRED
}

enum CadenceUnits {
  DAY
  WEEK
  MONTH
  YEAR
}

model Room {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  chores Chore[] @relation("ChoreRoom")
}

model ChoreBattle {
  id          Int       @id @default(autoincrement())
  // Chore battles are created automatically by its parent war when the war is started, so no createdBy 
  createdOn   DateTime  @default(now())
  startDate   DateTime?
  endDate     DateTime?
  title       String
  description String?

  combattants UsersInBattles[]

  war   ChoreWar @relation("ChoreBattles", fields: [warID], references: [id])
  warID Int

  chores Chore[] @relation("Chores")
}

model UsersInBattles {
  battle   ChoreBattle @relation(fields: [battleID], references: [id])
  battleID Int

  user   User   @relation(fields: [userID], references: [id])
  userID String

  @@id([battleID, userID])
}

model ChoreWar {
  id          Int       @id @default(autoincrement())
  createdBy   User?     @relation(fields: [createdByID], references: [id])
  createdByID String
  createdOn   DateTime  @default(now())
  startDate   DateTime?
  endDate     DateTime?
  
  title       String
  description String?

  combattants UserWars[]
  battles ChoreBattle[] @relation("ChoreBattles")
}

model UserWars {
  war   ChoreWar @relation(fields: [warID], references: [id])
  warID Int

  user   User   @relation(fields: [userID], references: [id])
  userID String

  @@id([warID, userID])
}
